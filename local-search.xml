<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringBoot（一）入门篇-你还不知道Spring Boot？</title>
    <link href="/2020/08/28/SpringBoot%EF%BC%88%E4%B8%80%EF%BC%89%E5%85%A5%E9%97%A8%E7%AF%87-%E4%BD%A0%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93SpringBoot%EF%BC%9F/"/>
    <url>/2020/08/28/SpringBoot%EF%BC%88%E4%B8%80%EF%BC%89%E5%85%A5%E9%97%A8%E7%AF%87-%E4%BD%A0%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93SpringBoot%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="1-什么是SpringBoot？"><a href="#1-什么是SpringBoot？" class="headerlink" title="1.什么是SpringBoot？"></a>1.什么是SpringBoot？</h1><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。以上关于SpringBoot的概念来源于百度百科。用我自己的语言来描述就是说，SpringBoot其实从根本上上来说并不是一个新的框架，而是对于Spring框架以及其他很多框架进行了一个默认配置，让我们使用开发起来更加方便。</p><h1 id="2-使用SpringBoot有什么好处？"><a href="#2-使用SpringBoot有什么好处？" class="headerlink" title="2.使用SpringBoot有什么好处？"></a>2.使用SpringBoot有什么好处？</h1><p>简单来说，使用SpringBoot进行开发 <strong>简单</strong>、<strong>快速</strong>、<strong>方便</strong>。在没有SpringBoot之前，我们是这样来搭建一个Spring Web项目。</p><ul><li>1）配置web.xml，加载Spring和Spring mvc</li><li>2）在application.properties/yaml中，配置数据库连接、Spring事务</li><li>3）对配置文件读取进行配置，开启注解，配置日志输出……</li><li>4）配置结束，部署在Tomcat运行调试</li><li>……</li></ul><p>使用这种方法不是不可以，但是我们使用的时候，搭建一个项目下来可能并不会有太多的感觉，但是你的项目模块比较多，一个一个的搭建，可能会把你逼疯。</p><p>但是如果使用SpringBoot进行搭建的话，很简单，只需要非常少的配置就可以快速的搭建一套Web项目或者搭建微服务项目。</p><h1 id="3-快速搭建示例"><a href="#3-快速搭建示例" class="headerlink" title="3.快速搭建示例"></a>3.快速搭建示例</h1><blockquote><p>这里我使用 IDEA 进行项目构建。</p></blockquote><ul><li>选择File -&gt; New -&gt; Project 弹出新建项目的框</li><li>选择Spring Initializr，默认勾选从 <a href="http://start.spring.io/">http://start.spring.io</a> 官网进行构建，点击Next</li><li>填写 Maven 坐标（Group和Artifact），同时也可以选择打包方式（Jar或者War），填写无误后，点击Next</li><li>这里可以选择SpringBoot的版本，先不选择任何的操作。继续点击Next</li><li>点击Finish，等待依赖导入，完成创建</li></ul><blockquote><p>SpringBoot使用的是Maven构建方式，我们可以使用自己的Maven。</p></blockquote><p>项目创建完成之后的目录结构：<br><img src="https://img-blog.csdnimg.cn/20200817174806529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMzczNjgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>如上图所示：SpringBoot的目录结构大致分为三个文件：</p><ul><li>src/main/java：存放我们编写的程序和程序主程序</li><li>src/main/recources：存放资源文件（包括配置文件、静态资源文件、mapper等等）</li><li>src/test/java：存放开发中测试代码</li></ul><p>项目目录结构搭建建议：<br><img src="https://img-blog.csdnimg.cn/20200817174823769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMzczNjgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>Application.java：程序的主启动类，建议放在根目录下</li><li>controller：页面访问控制层</li><li>service：存放业务代码</li><li>pojo：统称实体<ul><li>model：和数据库对应的实体</li><li>vo：用于向前端返回数据的实体对象</li><li>bo：用于接收前端请求的实体对象</li></ul></li></ul><p>最后运行Application.java中的main方法，至此，一个纯净的Java项目搭建完毕！</p><h1 id="4-引入web模块"><a href="#4-引入web模块" class="headerlink" title="4.引入web模块"></a>4.引入web模块</h1><blockquote><p>上面只是搭建了一个java框架，并没有引入web功能模块。</p></blockquote><p>1、引入web模块的第一步，添加web模块的依赖：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>pom.xml文件中默认有两个依赖：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><ul><li>spring-boot-starter：springboot核心starter，其中包括自动配置、yaml等等</li><li>spring-boot-starter-test：测试模块所需要的的依赖，其中包括JUnit、Hamcrest。</li></ul><blockquote><p>引入web依赖后，下面编写代码进行测试</p></blockquote><p>2、编写一个Controller</p><blockquote><p>在controller包下面的UserController里面编写。</p><p>@RestController 这个注解的作用就是将我们返回的数据都已json格式返回。</p></blockquote><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world&quot;</span>;    &#125;&#125;</code></pre><p>3、启动主程序，在浏览器地址栏输入 <a href="http://localhost:8080/hello">http://localhost:8080/hello</a> ,可以看到输出的结果 hello world，有没有感jio很简单啊！</p><h1 id="5-热部署介绍"><a href="#5-热部署介绍" class="headerlink" title="5.热部署介绍"></a>5.热部署介绍</h1><blockquote><p>热部署在现在日常开发中已经很常见了，具体配置是在pom.xml中添加一个devtools依赖即可。</p></blockquote><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h1><p>以上就是一个简单创建一个SpringBoot项目的具体实现流程，我们想要实现什么功能只需要在pom.xml中引入对应的依赖就好。</p><p>Maven仓库：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><p><a href="https://github.com/ifknow/spring-boot-examples/tree/master/spring-boot-helloworld">示例代码-GitHub</a></p><p><a href="https://gitee.com/ifknow/spring-boot-examples/tree/master/spring-boot-helloworld">示例代码-Gitee</a></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
