<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>links</title>
    <link href="/2020/08/29/index/"/>
    <url>/2020/08/29/index/</url>
    
    <content type="html"><![CDATA[<h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><p>暂无！</p><h2 id="个人链接"><a href="#个人链接" class="headerlink" title="个人链接"></a>个人链接</h2><p><a href="https://github.com/ifknow">GitHub</a> - 同步文章中代码<br><a href="https://gitee.com/ifknow">GitHub</a> - 同步文章中代码<br><a href="https://blog.csdn.net/qq_41373681">CSDN</a>  - 同步更新个人博客<br><a href="https://juejin.im/user/1521379825420973">掘金</a> - 同步更新个人博客<br><a href="https://gongshiyong.online/">ifknow</a> - 个人独立博客</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>如果想展示您的网站，请在本页下方留言。留言示例：</p><ul><li>网站名称：ifknow</li><li>网站链接：<a href="https://www.ifknow.online/">https://www.ifknow.online</a></li><li>网站描述：ifknow 的个人博客，分享技术，享受生活</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot（三）SpringBoot中定时任务的用法</title>
    <link href="/2020/08/29/SpringBoot%EF%BC%88%E4%B8%89%EF%BC%89SpringBoot%E4%B8%AD%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <url>/2020/08/29/SpringBoot%EF%BC%88%E4%B8%89%EF%BC%89SpringBoot%E4%B8%AD%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><blockquote><p>在日常的业务开发中，经常会有这样的需求：每天凌晨1点定时备份数据库，定时排查某条数据等业务需求。实现这样的需求就要用到定时任务了。<br>在SpringBoot中也有对定时任务支持。</p></blockquote><ul><li>实现定时任务的步骤<ul><li>启动类上加@EnableScheduling注解</li><li>编写定时任务要执行的代码，并把任务类和方法交有Spring IOC容器管理</li><li>了解 cron 表达式<br>新建一个SpringBoot项目，只需要引入<code>spring-boot-starter</code>依赖</li></ul></li></ul><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h1 id="1-在启动类上加上-EnableScheduling注解"><a href="#1-在启动类上加上-EnableScheduling注解" class="headerlink" title="1.在启动类上加上@EnableScheduling注解"></a>1.在启动类上加上@EnableScheduling注解</h1><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-meta">@EnableScheduling</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringBootShedulerApplication</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SpringApplication.run(SpringBootShedulerApplication.class, args);    &#125;&#125;</code></pre><h1 id="2-编写任务代码"><a href="#2-编写任务代码" class="headerlink" title="2.编写任务代码"></a>2.编写任务代码</h1><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SchedulerOutPutTask</span> </span>&#123;    <span class="hljs-meta">@Scheduled(cron = &quot;*/5 * * * * ?&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">schedulerOutPutTask</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-keyword">new</span> Date());    &#125;&#125;</code></pre><blockquote><p>启动运行定时任务就会运行，定时任务代码中的业务根据自己业务需求写在方法中并用@Scheduled(cron=””)标识。</p></blockquote><h1 id="3-了解cron表达式"><a href="#3-了解cron表达式" class="headerlink" title="3.了解cron表达式"></a>3.了解cron表达式</h1><blockquote><p>参考<a href="https://blog.csdn.net/qq_35860138/article/details/82738215">https://blog.csdn.net/qq_35860138/article/details/82738215</a></p></blockquote><blockquote><p>对于定时任务的实现，除业务代码外，最终还是由<code>cron</code>表达式进行控制执行的周期。</p></blockquote><h2 id="3-1-cron示例"><a href="#3-1-cron示例" class="headerlink" title="3.1 cron示例"></a>3.1 cron示例</h2><table><thead><tr><th>cron表达式</th><th>含义</th></tr></thead><tbody><tr><td>0 0 10,14,16  *  *  ?</td><td>每天上午10点，下午2点，4点</td></tr><tr><td>0 0/30 9-17 * * ?</td><td>朝九晚五工作时间内每半小时</td></tr><tr><td>0 0 12 ? * WED</td><td>表示每个星期三中午12点</td></tr><tr><td>0 0 12 * * ?</td><td>每天12点触发</td></tr><tr><td>0 15 10 ? * *</td><td>每天10点15分触发</td></tr><tr><td>0 15 10 * * ?</td><td>每天10点15分触发</td></tr><tr><td>0 15 10 * * ? *</td><td>每天10点15分触发</td></tr><tr><td>0 15 10 * * ? 2005</td><td>2005年每天10点15分触发</td></tr><tr><td>0 * 14 * * ?</td><td>每天下午的 2点到2点59分每分触发</td></tr><tr><td>0 0/5 14 * * ?</td><td>每天下午的 2点到2点59分(整点开始，每隔5分触发)</td></tr><tr><td>0 0/5 14,18 * * ?</td><td>每天下午的 2点到2点59分、18点到18点59分(整点开始，每隔5分触发)</td></tr><tr><td>0 0-5 14 * * ?</td><td>每天下午的 2点到2点05分每分触发</td></tr><tr><td>0 10,44 14 ? 3 WED</td><td>3月每周三下午的 2点10分和2点44分触发</td></tr><tr><td>0 15 10 ? * MON-FRI</td><td>从周一到周五每天上午的10点15分触发</td></tr><tr><td>0 15 10 15 * ?</td><td>每月15号上午10点15分触发</td></tr><tr><td>0 15 10 L * ?</td><td>每月最后一天的10点15分触发</td></tr><tr><td>0 15 10 ? * 6L</td><td>每月最后一周的星期五的10点15分触发</td></tr><tr><td>0 15 10 ? * 6L 2002-2005</td><td>从2002年到2005年每月最后一周的星期五的10点15分触发</td></tr><tr><td>0 15 10 ? * 6#3</td><td>每月的第三周的星期五开始触发</td></tr><tr><td>0 0 12 1/5 * ?</td><td>每月的第一个中午开始每隔5天触发一次</td></tr><tr><td>0 11 11 11 11 ?</td><td>每年的11月11号 11点11分触发(光棍节)</td></tr><tr><td>0 0 1 * * ?</td><td>每天凌晨一点执行一次</td></tr></tbody></table><h2 id="3-2-cron-表达式格式"><a href="#3-2-cron-表达式格式" class="headerlink" title="3.2 cron 表达式格式"></a>3.2 cron 表达式格式</h2><p>cron 表达式分为七个域：<br><font color=red>秒 分 时 日 月 周 年</font><br>每一个域之间用空格连接，不指定”年”域时，年域可以省略不写：<br><font color=red>秒 分 时 日 月 周</font></p><h2 id="3-3-cron表达式七个域列表"><a href="#3-3-cron表达式七个域列表" class="headerlink" title="3.3 cron表达式七个域列表"></a>3.3 cron表达式七个域列表</h2><table><thead><tr><th align="center">名称</th><th align="center">是否必须</th><th align="center">允许值</th><th align="center">特殊字符</th></tr></thead><tbody><tr><td align="center">秒</td><td align="center">是</td><td align="center">0 - 59</td><td align="center">,  -  *  /</td></tr><tr><td align="center">分</td><td align="center">是</td><td align="center">0 - 59</td><td align="center">,  -  *  /</td></tr><tr><td align="center">时</td><td align="center">是</td><td align="center">0 - 23</td><td align="center">,  -  *  /</td></tr><tr><td align="center">日</td><td align="center">是</td><td align="center">1 - 31</td><td align="center">,  -  *  ? L W C</td></tr><tr><td align="center">月</td><td align="center">是</td><td align="center">1 - 12 / JAN - DEC</td><td align="center">,  -  *  /</td></tr><tr><td align="center">周</td><td align="center">是</td><td align="center">1 - 7 / SUN - SAT</td><td align="center">,  -  *  ? / L C #</td></tr><tr><td align="center">年</td><td align="center">否</td><td align="center">空 / 1970 - 2099</td><td align="center">,  -  *  /</td></tr></tbody></table><p><strong>注意</strong></p><blockquote><p>需要注意的是”周”域中，使用数值表示时，7表示周六，1表示周日。</p></blockquote><h2 id="3-4-符号的使用"><a href="#3-4-符号的使用" class="headerlink" title="3.4 符号的使用"></a>3.4 符号的使用</h2><h3 id="3-4-1-所有域均可用”-”-”-“-”-”-”-“"><a href="#3-4-1-所有域均可用”-”-”-“-”-”-”-“" class="headerlink" title="3.4.1 所有域均可用”,”,”-“,”*”,”/“"></a>3.4.1 所有域均可用”,”,”-“,”*”,”/“</h3><ul><li><code>,</code>    x,y表示x和y</li><li><code>-</code>    x-y表示x到y</li><li><code>*</code>    表示每TIME</li><li><code>/</code>    x/y表示从x起，每隔y</li></ul><h3 id="3-4-2-“日”域另有”-”-”L”-”W”-”C”"><a href="#3-4-2-“日”域另有”-”-”L”-”W”-”C”" class="headerlink" title="3.4.2 “日”域另有”?”,”L”,”W”,”C”"></a>3.4.2 “日”域另有”?”,”L”,”W”,”C”</h3><ul><li><code>?</code>    表示不指定”日”域的值。规则是指定”周”域，则”日”域必须为”?”。反之，指定”日”域，则”周”域必须为”?”。如0 0 12 ? * MON 或 0 0 12 1 * ?</li><li><code>L</code>    2种写法。一，表示月末几天，如2L， 表示月末的2天。二，表示月末倒数第几天，如L-3，表示月末倒数第3天。</li><li><code>W</code>    表示临近某日的工作日，如15W，表示最接近15号的工作日，可能是15号（刚好是工作日）、15号前（刚好周六）或15号后（刚好周日）。</li><li><code>C</code>    表示和Calendar计划关联的值，如1C表示，1日或1日后包括Carlendar的第一天。</li><li><code>LW</code>    L和W的组合，只能出现在”日”域中。表示某月最后一个工作日，不一定是周五（详细见结尾PS）。</li></ul><h3 id="3-4-3-“周”域另有”-”-”L”-”-”-”C”"><a href="#3-4-3-“周”域另有”-”-”L”-”-”-”C”" class="headerlink" title="3.4.3 “周”域另有”?”,”L”,”#”,”C”"></a>3.4.3 “周”域另有”?”,”L”,”#”,”C”</h3><ul><li><code>?</code>    表示不指定”周”域。规则是指定”日”域值，则”周”域值必须为”?”。反之，指定”周”域值，则”日”域值必须为”?”。如0 0 12 1 * ? 或 0 0 12 ？ * MON</li><li><code>L</code>    表示某月的最后一个周几，如1L， 表示某月的最后一个周日（1表示周日），7L，表示某月的最后一个周六（7表示周六）。</li><li><code>#</code>    只能出现在”周”域中，表示第几个周几，x#y，y表示第几个，x表示周的值，如6#2，表示第2个周五（6表示周五）。</li><li><code>C</code>    表示和Calendar计划关联的值，如1C表示，周日或周日后包括Carlendar的第一天。</li></ul><p><strong>注意</strong></p><blockquote><p>“日域”域中，L和W组合为”LW”时，网上有很多种定义，比如：<br>说法一：LW表示某月的最后一个工作日<br>说法二：LW某月最后一周的最后一个工作日，即周五 </p></blockquote><h2 id="3-5-cron表达式在线生成工具"><a href="#3-5-cron表达式在线生成工具" class="headerlink" title="3.5 cron表达式在线生成工具"></a>3.5 cron表达式在线生成工具</h2><p><a href="http://www.pppet.net/">cron表达式在线生成工具</a></p><hr><p><a href="https://github.com/ifknow/spring-boot-examples/tree/master/spring-boot-scheduler">示例代码-GitHub</a></p><p><a href="https://gitee.com/ifknow/spring-boot-examples/tree/master/spring-boot-scheduler">示例代码-Gitee</a></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
      <category>Scheduler</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Scheduler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot（二）Redis的使用</title>
    <link href="/2020/08/28/SpringBoot%EF%BC%88%E4%BA%8C%EF%BC%89Redis%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/08/28/SpringBoot%EF%BC%88%E4%BA%8C%EF%BC%89Redis%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Redis是目前来说使用最广的key-value型数据库，相对于其他的nosql来说，Redis支持更丰富的数据结构</p><a id="more"></a><blockquote><p>在之前的文章中我有分享过Redis面试题，见 <a href="https://blog.csdn.net/qq_41373681/article/details/107605756">Redis全攻略、面试题</a>。这篇文章我主要介绍一下在SpringBoot中是如何使用Redis的。</p></blockquote><p>作为存储数据的工具来说，现在开发中使用到的最常见、最常用的数据库类型就分为关系型数据库和非关系型数据库。这里就不介绍他们的区别了~</p><p>关系型数据库最为代表就是<strong>Oracel</strong>，Microsoft SQL Server、Microsoft Access 和 <strong>MySQL</strong> 等；</p><p>非关系型数据库的代表就是 MongoDB、<strong>Redis</strong>、Memcache等。</p><p>Redis是目前来说使用最广的key-value型数据库，相对于其他的nosql来说，Redis支持更丰富的数据结构，就可参看 <a href="https://blog.csdn.net/qq_41373681/article/details/107605756">Redis全攻略、面试题</a>。</p><h1 id="1-Redis的优点"><a href="#1-Redis的优点" class="headerlink" title="1.Redis的优点"></a>1.Redis的优点</h1><ul><li>redis数据库就是一款<strong>缓存数据库</strong>，用于存储使用频繁的数据，这样<strong>减少访问数据库的次数</strong>，提高运行效率。</li><li>从存取速度来说，内存的读取速度官网数据是10W左右，如果对性能有更高的要求，可以对redis进行集群操作。</li></ul><h1 id="2-Redis的使用"><a href="#2-Redis的使用" class="headerlink" title="2.Redis的使用"></a>2.Redis的使用</h1><h2 id="2-1、引入SpringBoot提供的Redis依赖"><a href="#2-1、引入SpringBoot提供的Redis依赖" class="headerlink" title="2.1、引入SpringBoot提供的Redis依赖"></a>2.1、引入SpringBoot提供的Redis依赖</h2><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h2 id="2-2、添加配置文件"><a href="#2-2、添加配置文件" class="headerlink" title="2.2、添加配置文件"></a>2.2、添加配置文件</h2><p>在<strong>application.yml</strong> 文件中添加如下配置：</p><pre><code class="hljs java">spring:  redis:    # redis 服务器地址    host: localhost    # redis 服务器连接端口    port: <span class="hljs-number">6379</span>    # redis服务器连接密码，默认无密码    password: xxx    lettuce:      pool:        # redis最大连接数，默认为8        max-active: <span class="hljs-number">100</span>        # redis最大阻塞等待时间默认为-1        max-wait: PT10S        # redis最大空闲连接数，默认为8        max-idle: <span class="hljs-number">30</span>        # redis最小空闲连接数，默认为0        min-idle: <span class="hljs-number">1</span>    # redis数据库连接超时时间    timeout: PT10S    # redis数据库索引，默认为0    database: <span class="hljs-number">2</span></code></pre><h2 id="2-3、添加Redis配置类"><a href="#2-3、添加Redis配置类" class="headerlink" title="2.3、添加Redis配置类"></a>2.3、添加Redis配置类</h2><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisConfig</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="hljs-title">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span></span>&#123;        RedisTemplate&lt;String,Object&gt; redisTemplate=<span class="hljs-keyword">new</span> RedisTemplate&lt;&gt;();        redisTemplate.setConnectionFactory(redisConnectionFactory);        StringRedisSerializer stringRedisSerializer=<span class="hljs-keyword">new</span> StringRedisSerializer();        MyStringRedisSerializer myStringRedisSerializer=<span class="hljs-keyword">new</span> MyStringRedisSerializer();        redisTemplate.setKeySerializer(stringRedisSerializer);        redisTemplate.setHashKeySerializer(stringRedisSerializer);        redisTemplate.setHashValueSerializer(myStringRedisSerializer);        redisTemplate.setValueSerializer(myStringRedisSerializer);        <span class="hljs-keyword">return</span> redisTemplate;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStringRedisSerializer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RedisSerializer</span>&lt;<span class="hljs-title">Object</span>&gt; </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Charset charset;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyStringRedisSerializer</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">this</span>(StandardCharsets.UTF_8);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyStringRedisSerializer</span><span class="hljs-params">(Charset charset)</span> </span>&#123;        Assert.notNull(charset, <span class="hljs-string">&quot;Charset must not be null!&quot;</span>);        <span class="hljs-keyword">this</span>.charset = charset;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">deserialize</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] bytes)</span> </span>&#123;        <span class="hljs-keyword">return</span> (bytes == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : <span class="hljs-keyword">new</span> String(bytes, charset));    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] serialize(Object object) &#123;        <span class="hljs-keyword">if</span> (object == <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">0</span>];        &#125;        <span class="hljs-keyword">if</span>(object <span class="hljs-keyword">instanceof</span> String)&#123;            <span class="hljs-keyword">return</span> object.toString().getBytes(charset);        &#125;<span class="hljs-keyword">else</span> &#123;            String string = JSON.toJSONString(object);            <span class="hljs-keyword">return</span> string.getBytes(charset);        &#125;    &#125;&#125;</code></pre><h2 id="2-4、使用"><a href="#2-4、使用" class="headerlink" title="2.4、使用"></a>2.4、使用</h2><p><strong>首先自动注入RedisTemplate，</strong>Spring对于Redis的方法都封装在RedisTemplate中。</p><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testRedisInsertObject</span><span class="hljs-params">()</span> </span>&#123;    User user = <span class="hljs-keyword">new</span> User(UUID.randomUUID().toString(), <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">18</span>);    redisTemplate.opsForValue().set(user.getId(), user);&#125;</code></pre><p> <strong>可以看到数据已新增到redis中：</strong></p><p><img src="https://img-blog.csdnimg.cn/20200818104523995.png" alt="img"></p><p>这样写的话可能每次使用有需要创建一个RedisTemplate，我们可以将redisTemplate中的方法封装成一个工具类。</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.gsy.service;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<span class="hljs-keyword">import</span> java.util.*;<span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: ifknow</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: redis工具类</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisService</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;    <span class="hljs-comment">/** -------------------key相关操作--------------------- */</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 是否存在key</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Boolean</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">hasKey</span><span class="hljs-params">(String key)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.hasKey(key);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 删除key</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Boolean  成功返回true 失败返回false</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">delete</span><span class="hljs-params">(String key)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.delete(key);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 批量删除key</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> keys</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Long 返回成功删除key的数量</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">delete</span><span class="hljs-params">(Collection&lt;String&gt; keys)</span> </span>&#123;        <span class="hljs-keyword">return</span> redisTemplate.delete(keys);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 设置过期时间</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeout</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> unit</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Boolean</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">expire</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> timeout, TimeUnit unit)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key || <span class="hljs-keyword">null</span> == unit) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.expire(key, timeout, unit);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查找匹配的key</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pattern</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.Set&lt;java.lang.String&gt;</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;String&gt; <span class="hljs-title">keys</span><span class="hljs-params">(String pattern)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == pattern) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.keys(pattern);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 移除 key 的过期时间，key 将持久保持</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Boolean</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">persist</span><span class="hljs-params">(String key)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.persist(key);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 返回 key 的剩余的过期时间</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> unit</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Long 当 key 不存在时，返回 -2 。当 key 存在但没有设置剩余生存时间时，返回 -1 。否则，以秒为单位，返回 key的剩余生存时间</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">getExpire</span><span class="hljs-params">(String key, TimeUnit unit)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key || <span class="hljs-keyword">null</span> == unit) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">&quot;key or TomeUnit 不能为空&quot;</span>);        &#125;        <span class="hljs-keyword">return</span> redisTemplate.getExpire(key, unit);    &#125;    <span class="hljs-comment">/** -------------------String相关数据类型--------------------- */</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 设置指定 key 的值</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(String key, Object value)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key || <span class="hljs-keyword">null</span> == value) &#123;            <span class="hljs-keyword">return</span>;        &#125;        redisTemplate.opsForValue().set(key, value);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 设置key 的值 并设置过期时间</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> unit</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(String key, Object value, <span class="hljs-keyword">long</span> time, TimeUnit unit)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key || <span class="hljs-keyword">null</span> == value || <span class="hljs-keyword">null</span> == unit) &#123;            <span class="hljs-keyword">return</span>;        &#125;        redisTemplate.opsForValue().set(key, value, time, unit);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 设置key 的值 并设置过期时间</span><span class="hljs-comment">     * key存在 不做操作返回false</span><span class="hljs-comment">     * key不存在设置值返回true</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> unit</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Boolean</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">setifAbsen</span><span class="hljs-params">(String key, Object value, <span class="hljs-keyword">long</span> time, TimeUnit unit)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key || <span class="hljs-keyword">null</span> == value || <span class="hljs-keyword">null</span> == unit) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">&quot;key、value、unit都不能为空&quot;</span>);        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().setIfAbsent(key, value, time, unit);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 获取指定Key的Value。如果与该Key关联的Value不是string类型，Redis将抛出异常，</span><span class="hljs-comment">     * 因为GET命令只能用于获取string Value，如果该Key不存在，返回null</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Object</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">get</span><span class="hljs-params">(String key)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().get(key);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 很明显先get再set就说先获取key值对应的value然后再set 新的value 值。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Object</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getSet</span><span class="hljs-params">(String key, Object value)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().getAndSet(key, value);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 通过批量的key获取批量的value</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> keys</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.List&lt;java.lang.Object&gt;</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span>: 小霍</span><span class="hljs-comment">     * <span class="hljs-doctag">@UpdateUser</span>:</span><span class="hljs-comment">     * <span class="hljs-doctag">@Version</span>: 0.0.1</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title">mget</span><span class="hljs-params">(Collection&lt;String&gt; keys)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == keys) &#123;            <span class="hljs-keyword">return</span> Collections.emptyList();        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().multiGet(keys);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 将指定Key的Value原子性的增加increment。如果该Key不存在，其初始值为0，在incrby之后其值为increment。</span><span class="hljs-comment">     * 如果Value的值不能转换为整型值，如Hi，该操作将执行失败并抛出相应异常。操作成功则返回增加后的value值。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> increment</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> long</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">incrby</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> increment)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">&quot;key不能为空&quot;</span>);        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().increment(key, increment);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 将指定Key的Value原子性的减少decrement。如果该Key不存在，其初始值为0，</span><span class="hljs-comment">     * 在decrby之后其值为-decrement。如果Value的值不能转换为整型值，</span><span class="hljs-comment">     * 如Hi，该操作将执行失败并抛出相应的异常。操作成功则返回减少后的value值。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> decrement</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Long</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">decrby</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> decrement)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">&quot;key不能为空&quot;</span>);        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().decrement(key, decrement);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 如果该Key已经存在，APPEND命令将参数Value的数据追加到已存在Value的末尾。如果该Key不存在，</span><span class="hljs-comment">     * APPEND命令将会创建一个新的Key/Value。返回追加后Value的字符串长度。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Integer</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">append</span><span class="hljs-params">(String key, String value)</span> </span>&#123;        <span class="hljs-keyword">if</span> (key == <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">&quot;key不能为空&quot;</span>);        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().append(key, value);    &#125;<span class="hljs-comment">//******************hash数据类型*********************</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 通过key 和 field 获取指定的 value</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> field</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Object</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">hget</span><span class="hljs-params">(String key, Object field)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key || <span class="hljs-keyword">null</span> == field) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().get(key, field);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 为指定的Key设定Field/Value对，如果Key不存在，该命令将创建新Key以用于存储参数中的Field/Value对，</span><span class="hljs-comment">     * 如果参数中的Field在该Key中已经存在，则用新值覆盖其原有值。</span><span class="hljs-comment">     * 返回1表示新的Field被设置了新值，0表示Field已经存在，用新值覆盖原有值。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> field</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hset</span><span class="hljs-params">(String key, Object field, Object value)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key || <span class="hljs-keyword">null</span> == field) &#123;            <span class="hljs-keyword">return</span>;        &#125;        redisTemplate.opsForHash().put(key, field, value);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 判断指定Key中的指定Field是否存在，返回true表示存在，false表示参数中的Field或Key不存在。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> field</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Boolean</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">hexists</span><span class="hljs-params">(String key, Object field)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key || <span class="hljs-keyword">null</span> == field) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().hasKey(key, field);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 从指定Key的Hashes Value中删除参数中指定的多个字段，如果不存在的字段将被忽略，</span><span class="hljs-comment">     * 返回实际删除的Field数量。如果Key不存在，则将其视为空Hashes，并返回0。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fields</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Long</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">hdel</span><span class="hljs-params">(String key, Object... fields)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key || <span class="hljs-keyword">null</span> == fields || fields.length == <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().delete(key, fields);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 通过key获取所有的field和value</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.Map&lt;java.lang.Object, java.lang.Object&gt;</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;Object, Object&gt; <span class="hljs-title">hgetall</span><span class="hljs-params">(String key)</span> </span>&#123;        <span class="hljs-keyword">if</span> (key == <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().entries(key);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 逐对依次设置参数中给出的Field/Value对。如果其中某个Field已经存在，则用新值覆盖原有值。</span><span class="hljs-comment">     * 如果Key不存在，则创建新Key，同时设定参数中的Field/Value。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hash</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hmset</span><span class="hljs-params">(String key, Map&lt;String, Object&gt; hash)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key || <span class="hljs-keyword">null</span> == hash) &#123;            <span class="hljs-keyword">return</span>;        &#125;        redisTemplate.opsForHash().putAll(key, hash);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 获取和参数中指定Fields关联的一组Values，其返回顺序等同于Fields的请求顺序。</span><span class="hljs-comment">     * 如果请求的Field不存在，其值对应的value为null。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fields</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.List&lt;java.lang.Object&gt;</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title">hmget</span><span class="hljs-params">(String key, Collection&lt;Object&gt; fields)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key || <span class="hljs-keyword">null</span> == fields) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().multiGet(key, fields);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 对应key的字段自增相应的值</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> field</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> increment</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Long</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">hIncrBy</span><span class="hljs-params">(String key, Object field, <span class="hljs-keyword">long</span> increment)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key || <span class="hljs-keyword">null</span> == field) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">&quot;key or field 不能为空&quot;</span>);        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().increment(key, field, increment);    &#125;    <span class="hljs-comment">//***************List数据类型***************</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 向列表左边添加元素。如果该Key不存在，该命令将在插入之前创建一个与该Key关联的空链表，之后再将数据从链表的头部插入。</span><span class="hljs-comment">     * 如果该键的Value不是链表类型，该命令将将会抛出相关异常。操作成功则返回插入后链表中元素的数量。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> strs 可以使一个string 也可以使string数组</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Long 返回操作的value个数</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">lpush</span><span class="hljs-params">(String key, Object... strs)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForList().leftPushAll(key, strs);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 向列表右边添加元素。如果该Key不存在，该命令将在插入之前创建一个与该Key关联的空链表，之后再将数据从链表的尾部插入。</span><span class="hljs-comment">     * 如果该键的Value不是链表类型，该命令将将会抛出相关异常。操作成功则返回插入后链表中元素的数量。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> strs 可以使一个string 也可以使string数组</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Long 返回操作的value个数</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">rpush</span><span class="hljs-params">(String key, Object... strs)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForList().rightPushAll(key, strs);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 返回并弹出指定Key关联的链表中的第一个元素，即头部元素。如果该Key不存在，</span><span class="hljs-comment">     * 返回nil。LPOP命令执行两步操作：第一步是将列表左边的元素从列表中移除，第二步是返回被移除的元素值。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Object</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">lpop</span><span class="hljs-params">(String key)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForList().leftPop(key);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 返回并弹出指定Key关联的链表中的最后一个元素，即头部元素。如果该Key不存在，返回nil。</span><span class="hljs-comment">     * RPOP命令执行两步操作：第一步是将列表右边的元素从列表中移除，第二步是返回被移除的元素值。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Object</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">rpop</span><span class="hljs-params">(String key)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForList().rightPop(key);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 该命令的参数start和end都是0-based。即0表示链表头部(leftmost)的第一个元素。</span><span class="hljs-comment">     * 其中start的值也可以为负值，-1将表示链表中的最后一个元素，即尾部元素，-2表示倒数第二个并以此类推。</span><span class="hljs-comment">     * 该命令在获取元素时，start和end位置上的元素也会被取出。如果start的值大于链表中元素的数量，</span><span class="hljs-comment">     * 空链表将会被返回。如果end的值大于元素的数量，该命令则获取从start(包括start)开始，链表中剩余的所有元素。</span><span class="hljs-comment">     * 注：Redis的列表起始索引为0。显然，LRANGE numbers 0 -1 可以获取列表中的所有元素。返回指定范围内元素的列表。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> start</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> end</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.List&lt;java.lang.Object&gt;</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title">lrange</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> start, <span class="hljs-keyword">long</span> end)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForList().range(key, start, end);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</span><span class="hljs-comment">     * 下标 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。</span><span class="hljs-comment">     * 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> start</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> end</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ltrim</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> start, <span class="hljs-keyword">long</span> end)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span>;        &#125;        redisTemplate.opsForList().trim(key, start, end);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 该命令将返回链表中指定位置(index)的元素，index是0-based，表示从头部位置开始第index的元素，</span><span class="hljs-comment">     * 如果index为-1，表示尾部元素。如果与该Key关联的不是链表，该命令将返回相关的错误信息。 如果超出index返回这返回nil。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Object</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">lindex</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> index)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForList().index(key, index);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 返回指定Key关联的链表中元素的数量，如果该Key不存在，则返回0。如果与该Key关联的Value的类型不是链表，则抛出相关的异常。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Long</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">llen</span><span class="hljs-params">(String key)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForList().size(key);    &#125;    <span class="hljs-comment">//***************Set数据类型*************</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 如果在插入的过程用，参数中有的成员在Set中已经存在，该成员将被忽略，而其它成员仍将会被正常插入。</span><span class="hljs-comment">     * 如果执行该命令之前，该Key并不存在，该命令将会创建一个新的Set，此后再将参数中的成员陆续插入。返回实际插入的成员数量。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> members 可以是一个String 也可以是一个String数组</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Long 添加成功的个数</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">sadd</span><span class="hljs-params">(String key, Object... members)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForSet().add(key, members);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 返回Set中成员的数量，如果该Key并不存在，返回0。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Long</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">scard</span><span class="hljs-params">(String key)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForSet().size(key);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 判断参数中指定成员是否已经存在于与Key相关联的Set集合中。返回true表示已经存在，false表示不存在，或该Key本身并不存在。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> member</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Boolean</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">sismember</span><span class="hljs-params">(String key, Object member)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForSet().isMember(key, member);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 和SPOP一样，随机的返回Set中的一个成员，不同的是该命令并不会删除返回的成员。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.String</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">srandmember</span><span class="hljs-params">(String key)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForSet().randomMember(key);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 和SPOP一样，随机的返回Set中的一个成员，不同的是该命令并不会删除返回的成员。</span><span class="hljs-comment">     * 还可以传递count参数来一次随机获得多个元素，根据count的正负不同，具体表现也不同。</span><span class="hljs-comment">     * 当count 为正数时，SRANDMEMBER 会随机从集合里获得count个不重复的元素。</span><span class="hljs-comment">     * 如果count的值大于集合中的元素个数，则SRANDMEMBER 会返回集合中的全部元素。</span><span class="hljs-comment">     * 当count为负数时，SRANDMEMBER 会随机从集合里获得|count|个的元素，如果|count|大与集合中的元素，</span><span class="hljs-comment">     * 就会返回全部元素不够的以重复元素补齐，如果key不存在则返回nil。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> count</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.List&lt;java.lang.String&gt;</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title">srandmember</span><span class="hljs-params">(String key, <span class="hljs-keyword">int</span> count)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForSet().randomMembers(key, count);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 通过key随机删除一个set中的value并返回该值</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.String</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">spop</span><span class="hljs-params">(String key)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForSet().pop(key);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 通过key获取set中所有的value</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.Set&lt;java.lang.String&gt;</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;Object&gt; <span class="hljs-title">smembers</span><span class="hljs-params">(String key)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForSet().members(key);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 从与Key关联的Set中删除参数中指定的成员，不存在的参数成员将被忽略，</span><span class="hljs-comment">     * 如果该Key并不存在，将视为空Set处理。返回从Set中实际移除的成员数量，如果没有则返回0。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> members</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Long</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">srem</span><span class="hljs-params">(String key, Object... members)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForSet().remove(key, members);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 将元素value从一个集合移到另一个集合</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> srckey</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dstkey</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> member</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Long</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">smove</span><span class="hljs-params">(String srckey, String dstkey, Object member)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == srckey || <span class="hljs-keyword">null</span> == dstkey) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForSet().move(srckey, member, dstkey);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 获取两个集合的并集</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> otherKeys</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.Set&lt;java.lang.Object&gt; 返回两个集合合并值</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;Object&gt; <span class="hljs-title">sUnion</span><span class="hljs-params">(String key, String otherKeys)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key || otherKeys == <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForSet().union(key, otherKeys);    &#125;    <span class="hljs-comment">//**********Sorted Set 数据类型********************</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 添加参数中指定的所有成员及其分数到指定key的Sorted Set中，在该命令中我们可以指定多组score/member作为参数。</span><span class="hljs-comment">     * 如果在添加时参数中的某一成员已经存在，该命令将更新此成员的分数为新值，同时再将该成员基于新值重新排序。</span><span class="hljs-comment">     * 如果键不存在，该命令将为该键创建一个新的Sorted Set Value，并将score/member对插入其中。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> score</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> member</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Long</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">zadd</span><span class="hljs-params">(String key, <span class="hljs-keyword">double</span> score, Object member)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForZSet().add(key, member, score);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 该命令将移除参数中指定的成员，其中不存在的成员将被忽略。</span><span class="hljs-comment">     * 如果与该Key关联的Value不是Sorted Set，相应的错误信息将被返回。 如果操作成功则返回实际被删除的成员数量。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> members 可以使一个string 也可以是一个string数组</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Long</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">zrem</span><span class="hljs-params">(String key, Object... members)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key || <span class="hljs-keyword">null</span> == members) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForZSet().remove(key, members);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 返回Sorted Set中的成员数量，如果该Key不存在，返回0。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Long</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">zcard</span><span class="hljs-params">(String key)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForZSet().size(key);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 该命令将为指定Key中的指定成员增加指定的分数。如果成员不存在，该命令将添加该成员并假设其初始分数为0，</span><span class="hljs-comment">     * 此后再将其分数加上increment。如果Key不存在，该命令将创建该Key及其关联的Sorted Set，</span><span class="hljs-comment">     * 并包含参数指定的成员，其分数为increment参数。如果与该Key关联的不是Sorted Set类型，</span><span class="hljs-comment">     * 相关的错误信息将被返回。如果不报错则以串形式表示的新分数。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> score</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> member</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Double</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Double <span class="hljs-title">zincrby</span><span class="hljs-params">(String key, <span class="hljs-keyword">double</span> score, Object member)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">&quot;key 不能为空&quot;</span>);        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForZSet().incrementScore(key, member, score);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 该命令用于获取分数(score)在min和max之间的成员数量。</span><span class="hljs-comment">     * （min=&lt;score&lt;=max）如果加上了“(”着表明是开区间例如zcount key (min max 则 表示（min&lt;score=&lt;max）</span><span class="hljs-comment">     * 同理zcount key min (max 则表明(min=&lt;score&lt;max) 返回指定返回数量。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> min</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> max</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Long</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">zcount</span><span class="hljs-params">(String key, <span class="hljs-keyword">double</span> min, <span class="hljs-keyword">double</span> max)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForZSet().count(key, min, max);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Sorted Set中的成员都是按照分数从低到高的顺序存储，该命令将返回参数中指定成员的位置值，</span><span class="hljs-comment">     * 其中0表示第一个成员，它是Sorted Set中分数最低的成员。 如果该成员存在，则返回它的位置索引值。否则返回nil。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> member</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Long</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">zrank</span><span class="hljs-params">(String key, Object member)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForZSet().rank(key, member);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 如果该成员存在，以字符串的形式返回其分数，否则返回null</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> member</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.Double</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Double <span class="hljs-title">zscore</span><span class="hljs-params">(String key, Object member)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForZSet().score(key, member);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 该命令返回顺序在参数start和stop指定范围内的成员，这里start和stop参数都是0-based，即0表示第一个成员，-1表示最后一个成员。如果start大于该Sorted</span><span class="hljs-comment">     * Set中的最大索引值，或start &gt; stop，此时一个空集合将被返回。如果stop大于最大索引值，</span><span class="hljs-comment">     * 该命令将返回从start到集合的最后一个成员。如果命令中带有可选参数WITHSCORES选项，</span><span class="hljs-comment">     * 该命令在返回的结果中将包含每个成员的分数值，如value1,score1,value2,score2...。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> min</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> max</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.Set&lt;java.lang.String&gt; 指定区间内的有序集成员的列表。</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;Object&gt; <span class="hljs-title">zrange</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> min, <span class="hljs-keyword">long</span> max)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForZSet().range(key, min, max);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 该命令的功能和ZRANGE基本相同，唯一的差别在于该命令是通过反向排序获取指定位置的成员，</span><span class="hljs-comment">     * 即从高到低的顺序。如果成员具有相同的分数，则按降序字典顺序排序。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> start</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> end</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.Set&lt;java.lang.String&gt;</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;Object&gt; <span class="hljs-title">zReverseRange</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> start, <span class="hljs-keyword">long</span> end)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForZSet().reverseRange(key, start, end);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 该命令将返回分数在min和max之间的所有成员，即满足表达式min &lt;= score &lt;= max的成员，</span><span class="hljs-comment">     * 其中返回的成员是按照其分数从低到高的顺序返回，如果成员具有相同的分数，</span><span class="hljs-comment">     * 则按成员的字典顺序返回。可选参数LIMIT用于限制返回成员的数量范围。</span><span class="hljs-comment">     * 可选参数offset表示从符合条件的第offset个成员开始返回，同时返回count个成员。</span><span class="hljs-comment">     * 可选参数WITHSCORES的含义参照ZRANGE中该选项的说明。*最后需要说明的是参数中min和max的规则可参照命令ZCOUNT。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> max</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> min</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.Set&lt;java.lang.String&gt;</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;Object&gt; <span class="hljs-title">zrangebyscore</span><span class="hljs-params">(String key, <span class="hljs-keyword">double</span> min, <span class="hljs-keyword">double</span> max)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForZSet().rangeByScore(key, min, max);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 该命令除了排序方式是基于从高到低的分数排序之外，其它功能和参数含义均与ZRANGEBYSCORE相同。</span><span class="hljs-comment">     * 需要注意的是该命令中的min和max参数的顺序和ZRANGEBYSCORE命令是相反的。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> max</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> min</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.Set&lt;java.lang.String&gt;</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;Object&gt; <span class="hljs-title">zrevrangeByScore</span><span class="hljs-params">(String key, <span class="hljs-keyword">double</span> min, <span class="hljs-keyword">double</span> max)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == key) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> redisTemplate.opsForZSet().reverseRangeByScore(key, min, max);    &#125;&#125;</code></pre><p>感兴趣的话可以对每个方法进行测试！</p><p><a href="https://github.com/ifknow/spring-boot-examples/tree/master/spring-boot-redis">示例代码-GitHub</a></p><p><a href="http://www.gongshiyong.online/">示例代码-Gitee</a></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot（一）入门篇-你还不知道Spring Boot？</title>
    <link href="/2020/08/28/SpringBoot%EF%BC%88%E4%B8%80%EF%BC%89%E5%85%A5%E9%97%A8%E7%AF%87-%E4%BD%A0%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93SpringBoot%EF%BC%9F/"/>
    <url>/2020/08/28/SpringBoot%EF%BC%88%E4%B8%80%EF%BC%89%E5%85%A5%E9%97%A8%E7%AF%87-%E4%BD%A0%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93SpringBoot%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>SpringBoot其实从根本上上来说并不是一个新的框架，而是对于Spring框架以及其他很多框架进行了一个默认配置，让我们使用开发起来更加方便。</p><a id="more"></a><h1 id="1-什么是SpringBoot？"><a href="#1-什么是SpringBoot？" class="headerlink" title="1.什么是SpringBoot？"></a>1.什么是SpringBoot？</h1><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。以上关于SpringBoot的概念来源于百度百科。用我自己的语言来描述就是说，SpringBoot其实从根本上上来说并不是一个新的框架，而是对于Spring框架以及其他很多框架进行了一个默认配置，让我们使用开发起来更加方便。</p><h1 id="2-使用SpringBoot有什么好处？"><a href="#2-使用SpringBoot有什么好处？" class="headerlink" title="2.使用SpringBoot有什么好处？"></a>2.使用SpringBoot有什么好处？</h1><p>简单来说，使用SpringBoot进行开发 <strong>简单</strong>、<strong>快速</strong>、<strong>方便</strong>。在没有SpringBoot之前，我们是这样来搭建一个Spring Web项目。</p><ul><li>1）配置web.xml，加载Spring和Spring mvc</li><li>2）在application.properties/yaml中，配置数据库连接、Spring事务</li><li>3）对配置文件读取进行配置，开启注解，配置日志输出……</li><li>4）配置结束，部署在Tomcat运行调试</li><li>……</li></ul><p>使用这种方法不是不可以，但是我们使用的时候，搭建一个项目下来可能并不会有太多的感觉，但是你的项目模块比较多，一个一个的搭建，可能会把你逼疯。</p><p>但是如果使用SpringBoot进行搭建的话，很简单，只需要非常少的配置就可以快速的搭建一套Web项目或者搭建微服务项目。</p><h1 id="3-快速搭建示例"><a href="#3-快速搭建示例" class="headerlink" title="3.快速搭建示例"></a>3.快速搭建示例</h1><blockquote><p>这里我使用 IDEA 进行项目构建。</p></blockquote><ul><li>选择File -&gt; New -&gt; Project 弹出新建项目的框</li><li>选择Spring Initializr，默认勾选从 <a href="http://start.spring.io/">http://start.spring.io</a> 官网进行构建，点击Next</li><li>填写 Maven 坐标（Group和Artifact），同时也可以选择打包方式（Jar或者War），填写无误后，点击Next</li><li>这里可以选择SpringBoot的版本，先不选择任何的操作。继续点击Next</li><li>点击Finish，等待依赖导入，完成创建</li></ul><blockquote><p>SpringBoot使用的是Maven构建方式，我们可以使用自己的Maven。</p></blockquote><p>项目创建完成之后的目录结构：<br><img src="https://img-blog.csdnimg.cn/20200817174806529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMzczNjgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>如上图所示：SpringBoot的目录结构大致分为三个文件：</p><ul><li>src/main/java：存放我们编写的程序和程序主程序</li><li>src/main/recources：存放资源文件（包括配置文件、静态资源文件、mapper等等）</li><li>src/test/java：存放开发中测试代码</li></ul><p>项目目录结构搭建建议：<br><img src="https://img-blog.csdnimg.cn/20200817174823769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMzczNjgx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>Application.java：程序的主启动类，建议放在根目录下</li><li>controller：页面访问控制层</li><li>service：存放业务代码</li><li>pojo：统称实体<ul><li>model：和数据库对应的实体</li><li>vo：用于向前端返回数据的实体对象</li><li>bo：用于接收前端请求的实体对象</li></ul></li></ul><p>最后运行Application.java中的main方法，至此，一个纯净的Java项目搭建完毕！</p><h1 id="4-引入web模块"><a href="#4-引入web模块" class="headerlink" title="4.引入web模块"></a>4.引入web模块</h1><blockquote><p>上面只是搭建了一个java框架，并没有引入web功能模块。</p></blockquote><p>1、引入web模块的第一步，添加web模块的依赖：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>pom.xml文件中默认有两个依赖：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><ul><li>spring-boot-starter：springboot核心starter，其中包括自动配置、yaml等等</li><li>spring-boot-starter-test：测试模块所需要的的依赖，其中包括JUnit、Hamcrest。</li></ul><blockquote><p>引入web依赖后，下面编写代码进行测试</p></blockquote><p>2、编写一个Controller</p><blockquote><p>在controller包下面的UserController里面编写。</p><p>@RestController 这个注解的作用就是将我们返回的数据都已json格式返回。</p></blockquote><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world&quot;</span>;    &#125;&#125;</code></pre><p>3、启动主程序，在浏览器地址栏输入 <a href="http://localhost:8080/hello">http://localhost:8080/hello</a> ,可以看到输出的结果 hello world，有没有感jio很简单啊！</p><h1 id="5-热部署介绍"><a href="#5-热部署介绍" class="headerlink" title="5.热部署介绍"></a>5.热部署介绍</h1><blockquote><p>热部署在现在日常开发中已经很常见了，具体配置是在pom.xml中添加一个devtools依赖即可。</p></blockquote><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h1><p>以上就是一个简单创建一个SpringBoot项目的具体实现流程，我们想要实现什么功能只需要在pom.xml中引入对应的依赖就好。</p><p>Maven仓库：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><p><a href="https://github.com/ifknow/spring-boot-examples/tree/master/spring-boot-helloworld">示例代码-GitHub</a></p><p><a href="https://gitee.com/ifknow/spring-boot-examples/tree/master/spring-boot-helloworld">示例代码-Gitee</a></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/08/28/hello-world/"/>
    <url>/2020/08/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>hello</p><a id="more"></a><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
